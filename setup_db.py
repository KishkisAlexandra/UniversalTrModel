# setup_db.py
import sqlite3
import json
import os

DB_FILE = "utilities.db"

# --- –î–ê–ù–ù–´–ï –ò–ó –í–ê–®–ï–ì–û –°–¢–ê–†–û–ì–û CONFIG.PY ---
# –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CITIES_DB_OLD = {
    "–ú–∏–Ω—Å–∫": {
        "currency": "BYN",
        "volume_model": "standard_minsk",
        "recommendations": {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": ("üí°", "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã –∏ –±—ã—Ç–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É –∫–ª–∞—Å—Å–∞ A++."),
            "–í–æ–¥–∞": ("üö∞", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±—ã –Ω–∞ –ø—Ä–æ—Ç–µ—á–∫–∏."),
            "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": ("üíß", "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏."),
            "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": ("üî•", "–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã."),
            "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": ("üè¢", "—É—Ç–æ—á–Ω–∏—Ç–µ –≤ –ñ–≠–° —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.")
        }
    },
    "–õ–∏–º–∞—Å–æ–ª": {
        "currency": "‚Ç¨",
        "volume_model": "standard_limassol",
        "recommendations": {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": ("üí°", "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ø—Ä–∏–±–æ—Ä—ã."),
            "–í–æ–¥–∞": ("üö∞", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã."),
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": ("üåê", "—Å—Ä–∞–≤–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—Å–ª—É–≥–∏."),
            "–¢–µ–ª–µ—Ñ–æ–Ω": ("üìû", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∑–≤–æ–Ω–∫–æ–≤ –∏ –º–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫."),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": ("üè¢", "–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—á–µ—Ç–∞ –∑–∞ –æ–±—â–∏–µ —É—Å–ª—É–≥–∏ –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏.")
        }
    }
}

TARIFFS_DB_OLD = {
    "–ú–∏–Ω—Å–∫": {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": {"params": {"subsidy_rate": 0.2412, "full_rate": 0.2969}, "pipeline": [{"operator": "get_volume", "source": "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"}, {"operator": "apply_subsidy", "params_keys": ["subsidy_rate", "full_rate"]}]},
        "–í–æ–¥–∞": {"params": {"rate": 1.7858}, "pipeline": [{"operator": "get_volume", "source": "–í–æ–¥–∞"}, {"operator": "multiply_by_param", "param_key": "rate"}]},
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": {"params": {"rate": 0.9586}, "pipeline": [{"operator": "get_volume", "source": "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"}, {"operator": "multiply_by_param", "param_key": "rate"}]},
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": {"params": {"subsidy_rate": 24.7187, "full_rate": 134.94}, "pipeline": [{"operator": "get_volume", "source": "–û—Ç–æ–ø–ª–µ–Ω–∏–µ"}, {"operator": "apply_subsidy", "params_keys": ["subsidy_rate", "full_rate"]}]},
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": {"params": {"maintenance": 0.0388, "lighting": 0.0249, "waste": 0.2092, "repair": 0.05, "elevator_rate": 0.88, "zero": 0}, "pipeline": [{"operator": "sum_of_steps", "pipelines": [[{"operator": "get_param", "param_key": "area_m2"}, {"operator": "multiply_by_param", "param_key": "maintenance"}], [{"operator": "get_param", "param_key": "area_m2"}, {"operator": "multiply_by_param", "param_key": "lighting"}], [{"operator": "get_param", "param_key": "occupants"}, {"operator": "multiply_by_param", "param_key": "waste"}], [{"operator": "get_param", "param_key": "area_m2"}, {"operator": "multiply_by_param", "param_key": "repair"}], [{"operator": "apply_conditional_value", "check_param": "floor", "condition": "gt", "threshold": 1, "value_if_true": "elevator_rate", "value_if_false": "zero"}, {"operator": "multiply_by_context", "param_key": "occupants"}]]}]}
    },
    "–õ–∏–º–∞—Å–æ–ª": {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": {"vat": 0.19, "params": {"rate": 0.2661}, "pipeline": [{"operator": "get_volume", "source": "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"}, {"operator": "multiply_by_param", "param_key": "rate"}, {"operator": "apply_vat"}]},
        "–í–æ–¥–∞": {"vat": 0.05, "params": {"base_fee": 22.0, "brackets": [{"from": 1, "to": 40, "rate": 0.9}, {"from": 41, "to": 80, "rate": 1.43}]}, "pipeline": [{"operator": "get_volume", "source": "–í–æ–¥–∞"}, {"operator": "apply_progressive_rate", "param_key": "brackets"}, {"operator": "add_param", "param_key": "base_fee"}, {"operator": "apply_vat"}]},
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": {"vat": 0.19, "params": {"amount": 20}, "pipeline": [{"operator": "get_fixed_amount", "param_key": "amount"}, {"operator": "apply_vat"}]},
        "–¢–µ–ª–µ—Ñ–æ–Ω": {"vat": 0.19, "params": {"amount": 20}, "pipeline": [{"operator": "get_fixed_amount", "param_key": "amount"}, {"operator": "apply_vat"}]},
        "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": {"vat": 0.19, "params": {"min": 45, "max": 125, "avg_coeff": 0.5}, "pipeline": [{"operator": "sum_of_steps", "pipelines": [[{"operator": "get_fixed_amount", "param_key": "min"}], [{"operator": "get_fixed_amount", "param_key": "max"}]]}, {"operator": "multiply_by_param", "param_key": "avg_coeff"}, {"operator": "apply_vat"}]}
    }
}

# --- –ö–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ò –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–ó–´ ---
def setup_database():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ë–î, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    if os.path.exists(DB_FILE):
        os.remove(DB_FILE)
        print(f"–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª '{DB_FILE}' —É–¥–∞–ª–µ–Ω.")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # --- 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Å—Ö–µ–º—É) —Ç–∞–±–ª–∏—Ü ---
    cursor.execute("""
        CREATE TABLE cities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            currency TEXT NOT NULL,
            volume_model TEXT NOT NULL,
            recommendations TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE services (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE
        )
    """)
    cursor.execute("""
        CREATE TABLE tariffs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            city_id INTEGER NOT NULL,
            service_id INTEGER NOT NULL,
            vat REAL DEFAULT 0.0,
            params TEXT,
            pipeline TEXT,
            FOREIGN KEY (city_id) REFERENCES cities (id),
            FOREIGN KEY (service_id) REFERENCES services (id)
        )
    """)
    print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")

    # --- 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Ç–∞–±–ª–∏—Ü—ã ---
    # –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    for name, data in CITIES_DB_OLD.items():
        cursor.execute(
            "INSERT INTO cities (name, currency, volume_model, recommendations) VALUES (?, ?, ?, ?)",
            (name, data['currency'], data['volume_model'], json.dumps(data['recommendations']))
        )
    print("–ì–æ—Ä–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # –ü–æ—Ç–æ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    all_services = set()
    for city_services in TARIFFS_DB_OLD.values():
        for service_name in city_services.keys():
            all_services.add(service_name)
    
    for service in all_services:
        cursor.execute("INSERT INTO services (name) VALUES (?)", (service,))
    print("–£—Å–ª—É–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    
    # –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - —Ç–∞—Ä–∏—Ñ—ã
    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º id –≥–æ—Ä–æ–¥–æ–≤ –∏ —É—Å–ª—É–≥
    cities_map = {row[1]: row[0] for row in cursor.execute("SELECT id, name FROM cities").fetchall()}
    services_map = {row[1]: row[0] for row in cursor.execute("SELECT id, name FROM services").fetchall()}

    for city_name, services_data in TARIFFS_DB_OLD.items():
        for service_name, tariff_data in services_data.items():
            city_id = cities_map[city_name]
            service_id = services_map[service_name]
            
            cursor.execute(
                "INSERT INTO tariffs (city_id, service_id, vat, params, pipeline) VALUES (?, ?, ?, ?, ?)",
                (
                    city_id,
                    service_id,
                    tariff_data.get('vat', 0.0),
                    json.dumps(tariff_data.get('params', {})),
                    json.dumps(tariff_data.get('pipeline', []))
                )
            )
    print("–¢–∞—Ä–∏—Ñ—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    conn.commit()
    conn.close()
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_FILE}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")

if __name__ == "__main__":
    setup_database()
