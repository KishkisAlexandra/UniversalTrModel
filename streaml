pip install streamlit pandas matplotlib
streamlit run app.py
# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime

st.set_page_config(page_title="Utility Benchmark Demo ‚Äî Typical Households", page_icon="üè†", layout="wide")

# ---- Helper / model functions ----
profiles = {"eco": 0.85, "average": 1.0, "intensive": 1.15}

# Default tariffs (pre-filled for Minsk as agreed)
DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,     # BYN / kWh
    "water_BYN_per_m3": 1.7858,          # BYN / m3 (cold+hot combined tariff used for simplicity)
    "sewage_BYN_per_m3": 0.9586,         # BYN / m3
    "heating_BYN_per_Gcal": 135.0,       # BYN / Gcal
    "gas_BYN_per_m3": 0.10,              # BYN / m3 (placeholder, rarely used if central heating)
    "fixed_fees_BYN": 5.0                # BYN / month (administration, trash etc.)
}

# Coefficients (tweakable)
DEFAULT_COEFFS = {
    "elec_base_kWh": 40.0,
    "elec_per_person_kWh": 35.0,
    "elec_per_m2_kWh": 0.25,
    "water_per_person_m3": 3.5,
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_low": 0.08,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_Gcal_per_m2_season_high": 0.12,
    "heating_season_months": 7.0
}

def calculate_volumes(area_m2: float, occupants: int, profile: str, coeffs: dict = DEFAULT_COEFFS):
    pf = profiles.get(profile, 1.0)
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"] * occupants + coeffs["elec_per_m2_kWh"] * area_m2) * pf
    water = coeffs["water_per_person_m3"] * occupants * pf
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    G_low = coeffs["heating_Gcal_per_m2_season_low"] * area_m2
    G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
    G_high = coeffs["heating_Gcal_per_m2_season_high"] * area_m2
    heat_monthly_low = G_low / coeffs["heating_season_months"]
    heat_monthly_mid = G_mid / coeffs["heating_season_months"]
    heat_monthly_high = G_high / coeffs["heating_season_months"]
    volumes = {
        "electricity_kWh": round(elec, 1),
        "water_m3": round(water, 2),
        "hot_water_m3": round(hot_water, 2),
        "sewage_m3": round(sewage, 2),
        "heating_Gcal_month_low": round(heat_monthly_low, 3),
        "heating_Gcal_month_mid": round(heat_monthly_mid, 3),
        "heating_Gcal_month_high": round(heat_monthly_high, 3)
    }
    return volumes

def calculate_costs(volumes: dict, tariffs: dict, heating_scenario="mid"):
    elec_cost = volumes["electricity_kWh"] * tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["water_m3"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["sewage_m3"] * tariffs["sewage_BYN_per_m3"]
    if heating_scenario == "low":
        heat_cost = volumes["heating_Gcal_month_low"] * tariffs["heating_BYN_per_Gcal"]
    elif heating_scenario == "high":
        heat_cost = volumes["heating_Gcal_month_high"] * tariffs["heating_BYN_per_Gcal"]
    else:
        heat_cost = volumes["heating_Gcal_month_mid"] * tariffs["heating_BYN_per_Gcal"]
    gas_cost = 0.0
    fixed = tariffs.get("fixed_fees_BYN", 0.0)
    costs = {
        "electricity_cost": round(elec_cost, 2),
        "water_cost": round(water_cost, 2),
        "sewage_cost": round(sewage_cost, 2),
        "heating_cost": round(heat_cost, 2),
        "gas_cost": round(gas_cost, 2),
        "fixed_fees": round(fixed, 2)
    }
    costs["total_monthly"] = round(sum(costs.values()), 2)
    return costs

# ---- UI layout ----
st.title("üè† –î–µ–º–æ: –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤ ‚Äî —Ä–∞—Å—á—ë—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
st.markdown("""
**–¶–µ–ª—å:** –±—ã—Å—Ç—Ä–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—ë–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤, 
–ø–æ–∫–∞–∑—ã–≤–∞—è –¥–∏–∞–ø–∞–∑–æ–Ω (eco / average / intensive) –∏ –ø–æ–∑–≤–æ–ª—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.
""")

# Left column: inputs
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    st.subheader("–ê—Ä—Ö–µ—Ç–∏–ø (–≤–≤–æ–¥)")
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", min_value=10.0, max_value=1000.0, value=90.0, step=1.0)
    adults = st.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", min_value=0, max_value=10, value=2, step=1)
    children = st.number_input("–î–µ—Ç–∏", min_value=0, max_value=10, value=2, step=1)
    profile = st.selectbox("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è", options=["eco", "average", "intensive"], index=1, format_func=lambda x: x.capitalize())
    heating_type = st.selectbox("–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)", options=["central (district)", "gas boiler", "electric heating"], index=0)
    st.markdown("---")
    st.subheader("–¢–∞—Ä–∏—Ñ—ã (BYN) ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ")
    t_elec = st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, BYN / kWh", value=DEFAULT_TARIFFS["electricity_BYN_per_kWh"], format="%.6f")
    t_water = st.number_input("–í–æ–¥–∞, BYN / m¬≥", value=DEFAULT_TARIFFS["water_BYN_per_m3"], format="%.6f")
    t_sewage = st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è, BYN / m¬≥", value=DEFAULT_TARIFFS["sewage_BYN_per_m3"], format="%.6f")
    t_heat = st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ, BYN / Gcal", value=DEFAULT_TARIFFS["heating_BYN_per_Gcal"], format="%.2f")
    t_gas = st.number_input("–ì–∞–∑, BYN / m¬≥ (–µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ)", value=DEFAULT_TARIFFS["gas_BYN_per_m3"], format="%.6f")
    t_fixed = st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂—ã, BYN / –º–µ—Å", value=DEFAULT_TARIFFS["fixed_fees_BYN"], format="%.2f")
    st.markdown("---")
    st.subheader("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    elec_base = st.number_input("Elec: –±–∞–∑–æ–≤—ã–π kWh (–∞–ø–ø–∞—Ä–∞—Ç—ã)", value=DEFAULT_COEFFS["elec_base_kWh"])
    elec_pp = st.number_input("Elec: kWh –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞/–º–µ—Å", value=DEFAULT_COEFFS["elec_per_person_kWh"])
    elec_pm2 = st.number_input("Elec: kWh –Ω–∞ –º¬≤/–º–µ—Å", value=DEFAULT_COEFFS["elec_per_m2_kWh"])
    water_pp = st.number_input("–í–æ–¥–∞: m¬≥ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞/–º–µ—Å", value=DEFAULT_COEFFS["water_per_person_m3"])
    st.markdown("---")
    st.write("–°–ø—Ä–∞–≤–æ—á–Ω–æ: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ú–∏–Ω—Å–∫):")
    st.write("- Energosbyt / –ú–∏–Ω—Å–∫—ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç (—ç–ª–µ–∫—Ç—Ä–æ) ‚Äî [energosbyt.by]")
    st.write("- –ú–∏–Ω—Å–∫–≤–æ–¥–æ–∫–∞–Ω–∞–ª (–≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è) ‚Äî [minskvodokanal.by]")
    st.write("**–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç'**, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü—É —Å–ø—Ä–∞–≤–∞.")

# Build tariffs and coeffs dicts from sidebar inputs
tariffs = {
    "electricity_BYN_per_kWh": float(t_elec),
    "water_BYN_per_m3": float(t_water),
    "sewage_BYN_per_m3": float(t_sewage),
    "heating_BYN_per_Gcal": float(t_heat),
    "gas_BYN_per_m3": float(t_gas),
    "fixed_fees_BYN": float(t_fixed)
}
coeffs = {
    "elec_base_kWh": float(elec_base),
    "elec_per_person_kWh": float(elec_pp),
    "elec_per_m2_kWh": float(elec_pm2),
    "water_per_person_m3": float(water_pp),
    "hot_water_fraction": DEFAULT_COEFFS["hot_water_fraction"],
    "heating_Gcal_per_m2_season_low": DEFAULT_COEFFS["heating_Gcal_per_m2_season_low"],
    "heating_Gcal_per_m2_season_mid": DEFAULT_COEFFS["heating_Gcal_per_m2_season_mid"],
    "heating_Gcal_per_m2_season_high": DEFAULT_COEFFS["heating_Gcal_per_m2_season_high"],
    "heating_season_months": DEFAULT_COEFFS["heating_season_months"]
}

# Main area: compute and show
st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–∞")
occupants = adults + children
volumes = calculate_volumes(area_m2, occupants, profile, coeffs)
costs = calculate_costs(volumes, tariffs, heating_scenario="mid")

col1, col2 = st.columns([2, 1])
with col1:
    st.subheader(f"–ê—Ä—Ö–µ—Ç–∏–ø: {area_m2} –º¬≤, {adults} –≤–∑—Ä–æ—Å–ª—ã—Ö, {children} –¥–µ—Ç–µ–π ‚Äî –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
    st.markdown("**–û–±—ä—ë–º—ã (–æ—Ü–µ–Ω–∫–∞)**")
    vol_table = {
        "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (kWh/–º–µ—Å)", "–í–æ–¥–∞ (m¬≥/–º–µ—Å)", "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (m¬≥/–º–µ—Å)", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è (m¬≥/–º–µ—Å)", 
                     "–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal/–º–µ—Å, mid)"],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": [volumes["electricity_kWh"], volumes["water_m3"], volumes["hot_water_m3"], volumes["sewage_m3"], volumes["heating_Gcal_month_mid"]]
    }
    st.table(pd.DataFrame(vol_table))

    st.markdown("**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (BYN / –º–µ—Å)**")
    cost_df = pd.DataFrame([
        ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", f"{volumes['electricity_kWh']} kWh", tariffs["electricity_BYN_per_kWh"], costs["electricity_cost"]],
        ["–í–æ–¥–∞ (—Ö–æ–ª–æ–¥+–≥–æ—Ä—è—á)", f"{volumes['water_m3']} m¬≥", tariffs["water_BYN_per_m3"], costs["water_cost"]],
        ["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", f"{volumes['sewage_m3']} m¬≥", tariffs["sewage_BYN_per_m3"], costs["sewage_cost"]],
        ["–û—Ç–æ–ø–ª–µ–Ω–∏–µ (mid)", f"{volumes['heating_Gcal_month_mid']} Gcal", tariffs["heating_BYN_per_Gcal"], costs["heating_cost"]],
        ["–ì–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)", "-", tariffs["gas_BYN_per_m3"], costs["gas_cost"]],
        ["–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏", "-", "-", costs["fixed_fees"]],
        ["–ò—Ç–æ–≥–æ", "-", "-", costs["total_monthly"]]
    ], columns=["–£—Å–ª—É–≥–∞", "–û–±—ä—ë–º", "–¢–∞—Ä–∏—Ñ (BYN)", "–°—Ç–æ–∏–º–æ—Å—Ç—å (BYN)"])
    st.dataframe(cost_df.style.format({2: "{:.4f}", 3: "{:.2f}"}), height=300)

with col2:
    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    st.metric("–ò—Ç–æ–≥–æ (BYN/–º–µ—Å)", f"{costs['total_monthly']:.2f}")
    st.metric("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (BYN)", f"{costs['electricity_cost']:.2f}")
    st.metric("–û—Ç–æ–ø–ª–µ–Ω–∏–µ (BYN)", f"{costs['heating_cost']:.2f}")
    st.markdown("**–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è (Gcal/–º–µ—Å)**")
    st.write(f"low: {volumes['heating_Gcal_month_low']}  mid: {volumes['heating_Gcal_month_mid']}  high: {volumes['heating_Gcal_month_high']}")

# Plot cost breakdown
st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
plot_df = cost_df[cost_df["–£—Å–ª—É–≥–∞"] != "–ò—Ç–æ–≥–æ"].copy()
plot_df = plot_df.set_index("–£—Å–ª—É–≥–∞")
fig, ax = plt.subplots(figsize=(8,4))
plot_df["–°—Ç–æ–∏–º–æ—Å—Ç—å (BYN)"].astype(float).plot(kind='bar', ax=ax)
ax.set_ylabel("BYN / –º–µ—Å—è—Ü")
ax.set_xticklabels(plot_df.index, rotation=30, ha='right')
st.pyplot(fig)

# ---- multi-record report builder ----
if 'report' not in st.session_state:
    st.session_state.report = []

st.markdown("---")
st.subheader("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç –≤ –æ—Ç—á–µ—Ç (—Å–æ–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤)")

name = st.text_input("–ò–º—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Minsk - 90m¬≤ - 4pers)", value=f"Minsk_{int(area_m2)}m2_{occupants}occ")
if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç"):
    rec = {
        "name": name,
        "area_m2": area_m2,
        "adults": adults,
        "children": children,
        "profile": profile,
        "heating_type": heating_type,
        "electricity_kWh": volumes["electricity_kWh"],
        "water_m3": volumes["water_m3"],
        "heating_Gcal_mid": volumes["heating_Gcal_month_mid"],
        "total_BYN": costs["total_monthly"],
        "timestamp": datetime.utcnow().isoformat()
    }
    st.session_state.report.append(rec)
    st.success("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á—ë—Ç")

if st.session_state.report:
    st.markdown("**–û—Ç—á–µ—Ç ‚Äî —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏**")
    report_df = pd.DataFrame(st.session_state.report)
    st.dataframe(report_df, height=200)
    csv = report_df.to_csv(index=False).encode('utf-8')
    st.download_button("–°–∫–∞—á–∞—Ç—å CSV –æ—Ç—á–µ—Ç–∞", data=csv, file_name=f"utility_report_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.csv", mime="text/csv")

# ---- small guide / calibration ----
st.markdown("---")
with st.expander("–ö–∞–∫ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)"):
    st.write("""
    1. –í–æ–∑—å–º–∏—Ç–µ –æ–¥–Ω—É —Ä–µ–∞–ª—å–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é (–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –∏–ª–∏ –ø–æ–º–µ—Å—è—á–Ω–∞—è) –∏ –Ω–∞–π–¥–∏—Ç–µ:
       - –æ–±—ä–µ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (kWh) –∏–ª–∏ —Å—É–º–º—É –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏,
       - –æ–±—ä–µ–º –≤–æ–¥—ã (m¬≥),
       - —Å—É–º–º—É –∑–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–∏–ª–∏ –æ–±—ä–µ–º –≤ –ì–∫–∞–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω).
    2. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º—É –ø–ª–æ—â–∞–¥—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö.
    3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç" ‚Äî –∑–∞—Ç–µ–º —Å–∫–∞—á–∞–π—Ç–µ CSV.
    4. –î–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏: –≤—ã—á–∏—Å–ª–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç scale = (—Ä–µ–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ / –º–æ–¥–µ–ª—å–Ω–∞—è —Å—É–º–º–∞).
       - –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å scale –∫ elec_per_person_kWh –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å elec_base_kWh / elec_per_m2_kWh.
    5. –ü–æ—Å–ª–µ –ø–æ–¥–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª—å –¥–∞—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (eco/avg/int).
    """)
    st.write("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —è –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–æ –æ–¥–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤).")

st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ '—Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤'. –¢–∞—Ä–∏—Ñ—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ú–∏–Ω—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ Energosbyt / Minskvodokanal. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏ —Å—É–±—Å–∏–¥–∏–π).")
