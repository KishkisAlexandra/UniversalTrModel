# streamlit_app.py
import streamlit as st
import pandas as pd
import plotly.express as px

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏–∫—É –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã config.py –∏ engine.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ!
from config import CITIES_DB, SCENARIOS, HOUSE_COEFS
from engine import calculate_volumes, calculate_costs, apply_neighbor_adjustment

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# --- Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", list(CITIES_DB.keys()))
city_config = CITIES_DB[city]
currency_label = city_config["currency"]

month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1, 13)),
                             format_func=lambda x: ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
occupants = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤", 1, 20, 3)
scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

subsidy_multiplier = 1.0
if city == "–ú–∏–Ω—Å–∫":
    # –≠—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è –ú–∏–Ω—Å–∫–∞, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ UI
    if not st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", value=True):
        subsidy_multiplier = 0.0

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ ---
calculation_params = {
    "area_m2": area_m2, "occupants": occupants, "floor": 5, "subsidy_multiplier": subsidy_multiplier
}
ideal_volumes = calculate_volumes(city, area_m2, occupants, month, behavior_factor=1.0)
ideal_costs = calculate_costs(city, ideal_volumes, calculation_params)

neighbor_volumes = calculate_volumes(city, area_m2, occupants, month, behavior_factor)
neighbor_base_costs = calculate_costs(city, neighbor_volumes, calculation_params)
neighbor_costs = apply_neighbor_adjustment(neighbor_base_costs, house_category)

# --- –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
st.header(f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({currency_label})")
CATEGORIES = city_config["services"]
extra_categories = ["–ê—Ä–µ–Ω–¥–∞"] if city == "–õ–∏–º–∞—Å–æ–ª" else []

with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {k: st.number_input(f"{k} {currency_label}", 0.0, value=0.0, step=0.1) for k in CATEGORIES + extra_categories}
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ "–ò—Ç–æ–≥–æ"
    total_keys = [k for k in user_real.keys() if k not in extra_categories]
    user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in total_keys), 2)


# --- –ú–µ—Ç—Ä–∏–∫–∏ ---
st.header(f"üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({currency_label})")
col1, col2 = st.columns([2,1])
with col1:
    st.metric(f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, {currency_label}", f"{ideal_costs.get('–ò—Ç–æ–≥–æ', 0):.2f}")
    st.metric(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, {currency_label}", f"{user_real.get('–ò—Ç–æ–≥–æ', 0):.2f}")
    st.metric(f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, {currency_label}", f"{neighbor_costs.get('–ò—Ç–æ–≥–æ', 0):.2f}")

# --- –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
detail_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
    f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ({currency_label})": [ideal_costs.get(c, 0) for c in CATEGORIES],
    f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({currency_label})": [user_real.get(c, 0) for c in CATEGORIES],
    f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ ({currency_label})": [neighbor_costs.get(c, 0) for c in CATEGORIES],
})
st.dataframe(detail_df, use_container_width=True)

# --- –ì—Ä–∞—Ñ–∏–∫ ---
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Plotly
plot_df = detail_df.melt(id_vars="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", var_name="–¢–∏–ø", value_name="–°—É–º–º–∞")

fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", color="–¢–∏–ø", barmode="group",
             color_discrete_map={
                 f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ({currency_label})": "#636EFA",
                 f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({currency_label})": "#00CC96",
                 f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ ({currency_label})": "#EF553B"
             },
             text="–°—É–º–º–∞")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title=f"{currency_label} / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)

# --- –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
recommendations = city_config.get("recommendations", {})

def get_color(diff):
    if diff > 1: return "#FFCDD2"  # –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (—Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 –¥–µ–Ω–µ–∂–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã) ‚Äî –∫—Ä–∞—Å–Ω—ã–π
    else: return "#C8E6C9"         # –í –Ω–æ—Ä–º–µ ‚Äî –∑–µ–ª—ë–Ω—ã–π

# –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
cols = st.columns(len(recommendations))
for i, (cat, (emoji, tip)) in enumerate(recommendations.items()):
    ideal_val = ideal_costs.get(cat, 0)
    user_val = user_real.get(cat, 0)
    diff = user_val - ideal_val
    
    if ideal_val > 0:
        percent_over = round(diff / ideal_val * 100, 1)
        msg = f"–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ {percent_over}% ‚Äî {tip}" if diff > 1 else "–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ"
    else:
        msg = f"–†–∞—Å—Ö–æ–¥: {user_val:.2f}" if user_val > 0 else "–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ"
    
    with cols[i]:
        st.markdown(f"""
            <div style='padding:12px; border-radius:10px; background-color:{get_color(diff)};
                        font-size:0.9em; text-align:center; min-height:150px; 
                        display: flex; flex-direction: column; justify-content: center;'>
                <div style='font-size:1.5em'>{emoji}</div>
                <strong>{cat}</strong>
                <div style='margin-top:6px'>{msg}</div>
            </div>
        """, unsafe_allow_html=True)
