# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ======================================================================================
# 1. –ë–ê–ó–ê –î–ê–ù–ù–´–• (DB Simulation)
# –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã, –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–¥–µ—Å—å.
# –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ, –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –±–ª–æ–∫.
# ======================================================================================

CITIES_DB = {
    "–ú–∏–Ω—Å–∫": {
        "currency": "BYN",
        "services": ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"],
        "heating_months": [1, 2, 3, 4, 10, 11, 12],
        "volume_model": "standard_minsk",
        "recommendations": {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": ("üí°", "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã –∏ –±—ã—Ç–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É –∫–ª–∞—Å—Å–∞ A++."),
            "–í–æ–¥–∞": ("üö∞", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±—ã –Ω–∞ –ø—Ä–æ—Ç–µ—á–∫–∏."),
            "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": ("üî•", "–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã."),
            "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": ("üíß", "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏.")
        }
    },
    "–õ–∏–º–∞—Å–æ–ª": {
        "currency": "‚Ç¨",
        "services": ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "IPTV", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
        "heating_months": [],
        "volume_model": "standard_limassol",
        "recommendations": {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": ("üí°", "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ø—Ä–∏–±–æ—Ä—ã."),
            "–í–æ–¥–∞": ("üö∞", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã."),
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": ("üåê", "—Å—Ä–∞–≤–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—Å–ª—É–≥–∏."),
            "–¢–µ–ª–µ—Ñ–æ–Ω": ("üìû", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∑–≤–æ–Ω–∫–æ–≤ –∏ –º–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫."),
            "IPTV": ("üì∫", "–æ—Ç–∫–ª—é—á–∏—Ç–µ –ª–∏—à–Ω–∏–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏."),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": ("üè¢", "–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—á–µ—Ç–∞ –∑–∞ –æ–±—â–∏–µ —É—Å–ª—É–≥–∏ –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏.")
        }
    }
}

TARIFFS_DB = {
    "–ú–∏–Ω—Å–∫": {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": {"method": "flat_rate", "vat": 0.0, "params": {"rate": 0.2412, "subsidy_rate": 0.2969}},
        "–í–æ–¥–∞": {"method": "flat_rate", "vat": 0.0, "params": {"rate": 1.7858}},
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": {"method": "flat_rate", "vat": 0.0, "params": {"rate": 0.9586}},
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": {"method": "flat_rate", "vat": 0.0, "params": {"rate": 24.7187, "subsidy_rate": 134.94}},
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": {"method": "minsk_fixed_fees", "vat": 0.0, "params": {
            "maintenance_max": 0.0388, "lighting_max": 0.0249, "waste_norm": 0.2092,
            "elevator_max": 0.88, "capital_repair_rate": 0.05
        }},
    },
    "–õ–∏–º–∞—Å–æ–ª": {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": {"method": "flat_rate", "vat": 0.19, "params": {"rate": 0.2661}},
        "–í–æ–¥–∞": {"method": "progressive_rate", "vat": 0.05, "params": {
            "base_fee": 22.0,
            "brackets": [
                {"from": 1, "to": 40, "rate": 0.9},
                {"from": 41, "to": 80, "rate": 1.43},
                {"from": 81, "to": 120, "rate": 2.45},
                {"from": 121, "to": float('inf'), "rate": 5.0}
            ]
        }},
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": {"method": "fixed_fee", "vat": 0.19, "params": {"amount": 20}},
        "–¢–µ–ª–µ—Ñ–æ–Ω": {"method": "fixed_fee", "vat": 0.19, "params": {"amount": 20}},
        "IPTV": {"method": "fixed_fee", "vat": 0.19, "params": {"amount": 10}},
        "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": {"method": "service_range", "vat": 0.19, "params": {"min": 45, "max": 125}},
    }
}

# ------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≥–æ—Ä–æ–¥–∞)
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}
HOUSE_COEFS = {"–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0}, "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05}, "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05}}
REALISM_UPLIFT = 1.07


# ======================================================================================
# 2. –†–ê–°–ß–ï–¢–ù–´–ô –î–í–ò–ñ–û–ö (Calculation Engine)
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç "–ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.
# ======================================================================================

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ ---
def calculate_volumes(city, area_m2, occupants, month, behavior_factor):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."""
    volume_model = CITIES_DB[city]["volume_model"]

    if volume_model == "standard_minsk":
        return _calculate_volumes_minsk(area_m2, occupants, month, behavior_factor)
    elif volume_model == "standard_limassol":
        return _calculate_volumes_limassol(area_m2, occupants, behavior_factor)
    else:
        return {}

def _calculate_volumes_minsk(area_m2, occupants, month, behavior_factor):
    heating_months = CITIES_DB["–ú–∏–Ω—Å–∫"]["heating_months"]
    elec = (60.0 + 75.0 * occupants + 0.5 * area_m2) * behavior_factor
    water = 4.5 * occupants * behavior_factor
    heat_monthly = 0.0
    if month in heating_months:
        heat_monthly = (0.15 * area_m2) / len(heating_months)
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": elec, "–í–æ–¥–∞": water, "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": water, "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": heat_monthly
    }

def _calculate_volumes_limassol(area_m2, occupants, behavior_factor):
    elec = (3.0 * area_m2 + 150.0 * occupants) * behavior_factor
    water = (4.0 * occupants) * behavior_factor
    return {"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": elec, "–í–æ–¥–∞": water}


# --- –§—É–Ω–∫—Ü–∏–∏-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ ---
def _calculate_flat_rate(volume, params, **kwargs):
    rate = params.get("rate", 0)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—å–≥–æ—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    subsidy_multiplier = kwargs.get("subsidy_multiplier", 1.0)
    if subsidy_multiplier < 1.0:
        full_rate = params.get("subsidy_rate", rate)
        rate = rate * subsidy_multiplier + full_rate * (1 - subsidy_multiplier)
    return volume * rate

def _calculate_progressive_rate(volume, params, **kwargs):
    cost = params.get("base_fee", 0)
    brackets = params.get("brackets", [])
    remaining_volume = volume
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    sorted_brackets = sorted(brackets, key=lambda x: x['from'])
    
    last_upper_bound = 0
    for bracket in sorted_brackets:
        if remaining_volume <= 0:
            break
        
        bracket_width = bracket['to'] - bracket['from'] + 1
        volume_in_bracket = min(remaining_volume, bracket_width)
        cost += volume_in_bracket * bracket['rate']
        remaining_volume -= volume_in_bracket
        
    return cost

def _calculate_fixed_fee(volume, params, **kwargs):
    return params.get("amount", 0)

def _calculate_service_range(volume, params, **kwargs):
    return (params.get("min", 0) + params.get("max", 0)) / 2

def _calculate_minsk_fixed_fees(volume, params, **kwargs):
    area_m2 = kwargs.get("area_m2", 0)
    occupants = kwargs.get("occupants", 0)
    maintenance = area_m2 * params["maintenance_max"]
    lighting = area_m2 * params["lighting_max"]
    waste = occupants * params["waste_norm"]
    capital_repair = area_m2 * params["capital_repair_rate"]
    elevator = occupants * params["elevator_max"] if kwargs.get("floor", 1) >= 2 and kwargs.get("has_elevator", True) else 0.0
    return maintenance + lighting + waste + capital_repair + elevator

# --- –ì–ª–∞–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ---
def calculate_costs(city, volumes, calculation_params):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ —É—Å–ª—É–≥–∞–º –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ TARIFFS_DB.
    """
    costs = {}
    city_tariffs = TARIFFS_DB.get(city, {})
    
    # –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–¥–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å `if/elif`
    calculation_methods = {
        "flat_rate": _calculate_flat_rate,
        "progressive_rate": _calculate_progressive_rate,
        "fixed_fee": _calculate_fixed_fee,
        "service_range": _calculate_service_range,
        "minsk_fixed_fees": _calculate_minsk_fixed_fees,
    }

    for service, rule in city_tariffs.items():
        method_func = calculation_methods.get(rule["method"])
        if not method_func:
            continue
            
        volume = volumes.get(service, 0)
        base_cost = method_func(volume=volume, params=rule["params"], **calculation_params)
        final_cost = base_cost * (1 + rule["vat"])
        costs[service] = round(final_cost, 2)
    
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()), 2)
    return costs

def apply_neighbor_adjustment(costs, volumes, city, house_category):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã '—Å–æ—Å–µ–¥–∞'."""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
    adjusted_costs = costs.copy()
    
    # –í —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –º—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∞ –Ω–µ –æ–±—ä–µ–º—ã, —á—Ç–æ –ø—Ä–æ—â–µ.
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–º—ã, –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–æ –≤—ã–∑–æ–≤–∞ calculate_costs
    house_coef = HOUSE_COEFS.get(house_category, {})
    if "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è" in adjusted_costs and "electricity" in house_coef:
         adjusted_costs["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] *= house_coef["electricity"]
    if "–û—Ç–æ–ø–ª–µ–Ω–∏–µ" in adjusted_costs and "heating" in house_coef:
        adjusted_costs["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] *= house_coef["heating"]
        
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–π "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–º–∞" –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥
    adjusted_costs = {k: v * REALISM_UPLIFT for k, v in adjusted_costs.items() if k != "–ò—Ç–æ–≥–æ"}
    adjusted_costs["–ò—Ç–æ–≥–æ"] = round(sum(adjusted_costs.values()), 2)
    return adjusted_costs


# ======================================================================================
# 3. –ò–ù–¢–ï–†–§–ï–ô–° (Streamlit UI)
# –≠—Ç–∞ —á–∞—Å—Ç—å –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫.
# ======================================================================================

# --- Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", list(CITIES_DB.keys()))
city_config = CITIES_DB[city]
currency_label = city_config["currency"]

month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0, 10, 2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0, 10, 2)
occupants = adults + children
scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)
subsidy_multiplier = 1.0
if city == "–ú–∏–Ω—Å–∫": # –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –ú–∏–Ω—Å–∫–∞
    use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", value=True)
    if not use_subsidy:
        subsidy_multiplier = 0.0 # 0% –ª—å–≥–æ—Ç—ã = 100% –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ ---
calculation_params = {
    "area_m2": area_m2,
    "occupants": occupants,
    "floor": 5, # –ü—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ UI
    "has_elevator": True, # –ü—Ä–∏–º–µ—Ä
    "subsidy_multiplier": subsidy_multiplier
}

# –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
ideal_volumes = calculate_volumes(city, area_m2, occupants, month, behavior_factor=1.0)
ideal_costs = calculate_costs(city, ideal_volumes, calculation_params)

# –†–∞—Å—á–µ—Ç "—Å–æ—Å–µ–¥–∞"
neighbor_volumes = calculate_volumes(city, area_m2, occupants, month, behavior_factor)
neighbor_base_costs = calculate_costs(city, neighbor_volumes, calculation_params)
neighbor_costs = apply_neighbor_adjustment(neighbor_base_costs, neighbor_volumes, city, house_category)


# --- –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
st.header(f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({currency_label})")
CATEGORIES = city_config["services"]
extra_categories = ["–ê—Ä–µ–Ω–¥–∞"] if city == "–õ–∏–º–∞—Å–æ–ª" else []

with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {k: st.number_input(f"{k} {currency_label}", 0.0, value=0.0, step=0.1) for k in CATEGORIES + extra_categories}
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ "–ò—Ç–æ–≥–æ"
    total_keys = [k for k in user_real.keys() if k not in extra_categories]
    user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in total_keys), 2)


# --- –ú–µ—Ç—Ä–∏–∫–∏ ---
st.header(f"üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({currency_label})")
col1, col2 = st.columns([2,1])
with col1:
    st.metric(f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, {currency_label}", f"{ideal_costs.get('–ò—Ç–æ–≥–æ', 0):.2f}")
    st.metric(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, {currency_label}", f"{user_real.get('–ò—Ç–æ–≥–æ', 0):.2f}")
    st.metric(f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, {currency_label}", f"{neighbor_costs.get('–ò—Ç–æ–≥–æ', 0):.2f}")

# --- –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
detail_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
    f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ({currency_label})": [ideal_costs.get(c, 0) for c in CATEGORIES],
    f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({currency_label})": [user_real.get(c, 0) for c in CATEGORIES],
    f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ ({currency_label})": [neighbor_costs.get(c, 0) for c in CATEGORIES],
})
st.dataframe(detail_df, height=len(CATEGORIES)*35 + 38) # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã

# --- –ì—Ä–∞—Ñ–∏–∫ ---
plot_df_data = []
for cat in CATEGORIES:
    plot_df_data.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–°—É–º–º–∞": ideal_costs.get(cat, 0)})
    plot_df_data.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°—É–º–º–∞": user_real.get(cat, 0)})
    plot_df_data.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥", "–°—É–º–º–∞": neighbor_costs.get(cat, 0)})

plot_df = pd.DataFrame(plot_df_data)

fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", color="–¢–∏–ø", barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="–°—É–º–º–∞")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title=f"{currency_label} / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)

# --- –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
recommendations = city_config["recommendations"]

def get_color(diff):
    if diff > 1: return "#FFCDD2"  # –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ ‚Äî –∫—Ä–∞—Å–Ω—ã–π
    else: return "#C8E6C9"         # –≤ –Ω–æ—Ä–º–µ ‚Äî –∑–µ–ª—ë–Ω—ã–π

cols = st.columns(len(recommendations))
for i, (cat, (emoji, tip)) in enumerate(recommendations.items()):
    ideal_val = ideal_costs.get(cat, 0)
    user_val = user_real.get(cat, 0)
    diff = user_val - ideal_val
    
    if ideal_val > 0:
        percent_over = round(diff / ideal_val * 100, 1)
        msg = f"–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ {percent_over}% ‚Äî {tip}" if diff > 1 else "–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ"
    else:
        msg = "–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ" if user_val == 0 else f"–†–∞—Å—Ö–æ–¥: {user_val:.2f}"
    
    with cols[i]:
        st.markdown(f"""
            <div style='padding:12px; border-radius:10px; background-color:{get_color(diff)};
                        font-size:0.9em; text-align:center; min-height:130px; display: flex; flex-direction: column; justify-content: center;'>
                <div style='font-size:1.5em'>{emoji}</div>
                <strong>{cat}</strong>
                <div style='margin-top:6px'>{msg}</div>
            </div>
        """, unsafe_allow_html=True)
